pipeline {
    agent any

    environment {
        APP_ENV = 'production'
        PATH = "${env.PATH}:/usr/local/bin"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Start container') {
                      steps {
                        echo 'Starting container from Docker Hub...'
                        // bat 'docker-compose -f docker-compose-production.yml pull' // Baixa a imagem do Docker Hub
                        sh 'docker-compose -f docker-compose-production.yml pull' // Baixa a imagem do Docker Hub // Comando para macos que estou usando
                        // bat 'docker-compose -f docker-compose-production.yml up -d --no-color'
                        sh 'docker-compose -f docker-compose-production.yml up -d --no-color' // Comando para macos que estou usando
                        sleep time: 120, unit: 'SECONDS' // Aumenta o tempo para o serviço Spring Boot iniciar
                        // bat 'docker-compose -f docker-compose-production.yml logs' // Verifica os logs para conferir o status do Spring Boot
                        sh 'docker-compose -f docker-compose-production.yml logs' // Verifica os logs para conferir o status do Spring Boot // Comando para macos que estou usando
                        // bat 'docker-compose -f docker-compose-production.yml ps' // Verifica o status do container
                        sh 'docker-compose -f docker-compose-production.yml ps' // Verifica o status do container // Comando para macos que estou usando
                      }
                    }

        stage('Run tests against the container') {
                    steps {
                        // bat 'curl http://localhost:8687 || echo "Service not responding"'
                        sh 'curl http://localhost:8687 || echo "Service not responding"' // Comando para macos que estou usando
                    }
                }


    }

    post {
        success {
            echo "Pipeline Production concluído com sucesso."
        }
        failure {
            echo "Pipeline Production falhou."
        }
    }
}